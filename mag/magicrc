puts stdout "Sourcing design .magicrc for technology sky130A ..."

# Put grid on 0.005 pitch.  This is important, as some commands don't
# rescale the grid automatically (such as lef read?).

set scalefac [tech lambda]
if {[lindex $scalefac 1] < 2} {
    scalegrid 1 2
}

# drc off
drc euclidean on
# Change this to a fixed number for repeatable behavior with GDS writes
# e.g., "random seed 12345"
catch {random seed}

# Turn off the scale option on ext2spice or else it conflicts with the
# scale in the model files.
ext2spice scale off

# Allow override of PDK path from environment variable PDKPATH
if {[catch {set PDKPATH $env(PDKPATH)}]} {
    set PDKPATH "$::env(PDK_ROOT)/sky130A"
}

# loading technology
tech load $PDKPATH/libs.tech/magic/sky130A.tech

# load device generator
source $PDKPATH/libs.tech/magic/sky130A.tcl

# load bind keys (optional)
# source $PDKPATH/libs.tech/magic/sky130A-BindKeys

# set units to lambda grid 
snap lambda

# set sky130 standard power, ground, and substrate names
set VDD VPWR
set GND VGND
set SUB VSUBS

# Allow override of type of magic library views used, "mag" or "maglef",
# from environment variable MAGTYPE

if {[catch {set MAGTYPE $env(MAGTYPE)}]} {
   set MAGTYPE mag
}

# add path to reference cells
if {[file isdir ${PDKPATH}/libs.ref/${MAGTYPE}]} {
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_pr
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_io
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_hd
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_hdll
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_hs
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_hvl
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_lp
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_ls
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_fd_sc_ms
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_osu_sc
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_osu_sc_t18
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_ml_xx_hd
    addpath ${PDKPATH}/libs.ref/${MAGTYPE}/sky130_sram_macros
} else {
    addpath ${PDKPATH}/libs.ref/sky130_fd_pr/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_io/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_hd/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_hdll/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_hs/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_hvl/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_lp/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_ls/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_fd_sc_ms/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_osu_sc/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_osu_sc_t18/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_ml_xx_hd/${MAGTYPE}
    addpath ${PDKPATH}/libs.ref/sky130_sram_macros/${MAGTYPE}
}

# add path to GDS cells
gds readonly yes
# add path to IP from catalog.  This procedure defined in the PDK script.
catch {magic::query_mylib_ip}
# add path to local IP from user design space.  Defined in the PDK script.
catch {magic::query_my_projects}

set PDK sky130A


# Useful bindkeys for Magic VLSI
# (c) 2021-2023 Harald Pretl
# Institute for Integrated Circuits, Johannes Kepler University Linz

macro 0 "see no * ; see locali ; see mcon"
macro ! "see no * ; see mcon   ; see metal1 ; see via1"
macro @ "see no * ; see via1   ; see metal2 ; see via2"
macro # "see no * ; see via2   ; see metal3 ; see via3"
macro $ "see no * ; see via3   ; see metal4 ; see via4"
macro % "see no * ; see via4   ; see metal5"
macro 9 "see *"

# Here a useful one proposed by Matt Guthaus

macro = "drc find; findbox zoom; zoom 16"

# Here a few from sky130A/libs.tech/magic/sky130A-BindKeys
# mainly use the ones not altering original magic useage, as we
# want to stick to magic as much as we can; just adding the real
# useful ones

macro f "view"
macro ^f "sideways"
macro p "tool wire ; magic::trackwire %W pick"
macro k "magic::measure"
macro K "magic::unmeasure"
macro q "magic::gencell {} ; raise .params"
macro y "drc check ; drc why"
macro ? "select area ; what"

# Zoom on cursor using mouse scrollwheel, and left/right scroll
# with CTRL-scrollwheel (SHFT-scrollwheel moves up/down)

macro Control_XK_Pointer_Button4 "scroll l .05 w"
macro Control_XK_Pointer_Button5 "scroll r .05 w"
macro Shift_XK_Pointer_Button4 "scroll u .05 w"
macro Shift_XK_Pointer_Button5 "scroll d .05 w"
macro Button4 "zoom 0.70711"
macro Button5 "zoom 1.41421"
